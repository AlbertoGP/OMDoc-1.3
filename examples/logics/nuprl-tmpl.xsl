<?xml version="1.0"?>
<!--
    An XSL style sheet for presenting OpenMath Symbols used in the 
    OpenMath Document (OMDoc) nuprl.omdoc.omdoc.
  
    This XSL style file is automatically generated from an OMDoc document, do not edit!
  -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:om="http://www.openmath.org/OpenMath" xmlns:omdoc="http://www.mathweb.org/omdoc" version="1.0" exsl:dummy="to get the namespace right" xlink:dummy="to get the namespace right" om:dummy="to get the namespace right" omdoc:dummy="to get the namespace right" extension-element-prefixes="exsl">

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='dependent-function-type' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'dependent-function-type'"/><xsl:choose><xsl:when test="$format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>↦</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>:</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>↦</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>-&gt;</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='function-type' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'function-type'"/><xsl:choose><xsl:when test="$format='html' or $format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">↦</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'function-type',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">-&gt;</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'function-type',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMBIND[not(@xref) and  om:OMS[position()=1 and @name='lambda' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'lambda'"/><xsl:choose><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">\backslash</xsl:with-param><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="'.'"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'lambda',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">\</xsl:with-param><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="'.'"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'lambda',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='lambda' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'lambda'"/><xsl:choose><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">{\lambda}</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'lambda',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml' or $format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">λ</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'lambda',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pvs'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">LAMBDA</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'lambda',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='post'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">lam</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'lambda',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:apply-templates select="." mode="fallback"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMBIND[not(@xref) and  om:OMS[position()=1 and @name='dependent-product' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'dependent-product'"/><xsl:choose><xsl:when test="$format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>×</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>:</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>×</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> x </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='product' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'product'"/><xsl:choose><xsl:when test="$format='html' or $format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">×</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'product',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form"> x </xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'product',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='pair' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'pair'"/><xsl:choose><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">,</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'pair',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">\langle</xsl:with-param><xsl:with-param name="close">\rangle</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'pair',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">,</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'pair',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">&lt;</xsl:with-param><xsl:with-param name="close">&gt;</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'pair',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMBIND[not(@xref) and  om:OMS[position()=1 and @name='spread' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'spread'"/><xsl:choose><xsl:when test="$format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>let 〈&lt;</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>,</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>〉=</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> in </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>let\langle</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>,</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>&gt;=</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> in </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>let</xsl:text></xsl:element><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:attribute name="fence"><xsl:text>true</xsl:text></xsl:attribute><xsl:text>〈</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:attribute name="separator"><xsl:text>true</xsl:text></xsl:attribute><xsl:text>〈</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:attribute name="fence"><xsl:text>true</xsl:text></xsl:attribute><xsl:text>〉</xsl:text></xsl:element></xsl:element><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>=</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>in</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>let &lt;</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>,</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>&gt;=</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> in </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='disjoint-union' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'disjoint-union'"/><xsl:choose><xsl:when test="$format='html' or $format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">⊎</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'disjoint-union',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">\uplus</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'disjoint-union',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">+</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'disjoint-union',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='inl' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'inl'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">inl</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'inl',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'inl',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='inr' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'inr'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">inr</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'inr',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'inr',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='universe-of-level' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'universe-of-level'"/><xsl:choose><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">{\cal U}</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'universe-of-level',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'universe-of-level',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">U</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'universe-of-level',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'universe-of-level',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='eq' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'eq'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>=</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text> in </xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>=</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> in </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='axiom' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'axiom'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">Ax</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'axiom',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='void' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'void'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">void</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'void',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='atom' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'atom'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">atom</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'atom',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='atom-conditional' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'atom-conditional'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>if</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>=</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>then</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>else</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[5]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>if </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>=</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> then </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> else </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[5]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='Z' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'Z'"/><xsl:choose><xsl:when test="$format='Tex'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">{\mathbb Z}</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'Z',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='html' or $format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">ℤ</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'Z',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">Z</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'Z',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='rec-case' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'rec-case'"/></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='unary-minus' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'unary-minus'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">-</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'unary-minus',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="200"/><xsl:with-param name="open"/><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="200"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'unary-minus',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='plus' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'plus'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="500"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="500"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">+</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'plus',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="500"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='minus' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'minus'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="200"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="200"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">-</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'minus',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="200"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='times' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'times'"/><xsl:choose><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">{\cdot}</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'times',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="400"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="400"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'times',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">⁢</xsl:with-param><xsl:with-param name="crossref-symbol" select="'no'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'times',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="400"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="400"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'no'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'times',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="400"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="400"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">*</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'times',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="400"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='divide' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'divide'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="600"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:element name="mfrac" namespace="{$TargetNS}"><xsl:attribute name="id"><xsl:value-of select="concat('MCR',$prefix,generate-id())"/></xsl:attribute><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="600"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'divide',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param><xsl:with-param name="parent-element">mfrac</xsl:with-param></xsl:call-template></xsl:element></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">\over </xsl:with-param><xsl:with-param name="crossref-symbol" select="'no'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'divide',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="600"/><xsl:with-param name="open">{</xsl:with-param><xsl:with-param name="close">}</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="600"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'no'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'divide',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="600"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="600"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">/</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'divide',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="600"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='rem' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'rem'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form"> rem </xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'rem',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='integer-less-conditional' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'integer-less-conditional'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>if</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>&lt;</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>then</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>else</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[5]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>if </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> &lt; </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> then </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[4]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text> else </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[5]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='less' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'less'"/><xsl:choose><xsl:when test="$format='html' or $format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">&amp;lt;</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'less',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">&lt;</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'less',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='list-type' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'list-type'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form"> list</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'list-type',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open"/><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'list-type',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='nil' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'nil'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">[]</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nil',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='cons' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'cons'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">::</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'cons',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='rectype' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'rectype'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>rectype</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>=</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>rectype </xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>=</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='structural-recursion' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'structural-recursion'"/></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='subset-type' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'subset-type'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>{</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>:</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>|</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>}</xsl:text></xsl:element></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>\left\{</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>\left|</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>\right.\right\}</xsl:text></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>{</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>|</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>}</xsl:text></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='independent-subset-type' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'independent-subset-type'"/><xsl:choose><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">\left\{</xsl:with-param><xsl:with-param name="close">\right.\right\}</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">\left|</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'independent-subset-type',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">{</xsl:with-param><xsl:with-param name="close">}</xsl:with-param><xsl:with-param name="content"><!--for some reason a comment here helps, don't ask me why--><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">|</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'independent-subset-type',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="*[3]"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='quotient-type' and @cd='nuprl' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'quotient-type'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>,</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>:</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>//</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>,</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>//</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='type-intersection' and @cd='nuprl' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='nuprl']/@omdoc)"/><xsl:variable name="name" select="'type-intersection'"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>{\isect}</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>:</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>.</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:text>{\cap}</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[2]/*[1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>:</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>.</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[3]/*[3]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:otherwise></xsl:choose></xsl:template>

</xsl:stylesheet>
